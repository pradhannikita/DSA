Given a non-negative integer `x`, return *the square root of* `x` *rounded down to the nearest integer*. The returned integer should be **non-negative** as well.
You **must not use** any built-in exponent function or operator.
- For example, do not use `pow(x, 0.5)` in c++ or `x ** 0.5` in python.

Ans:- 
def mySqrt(x):
    if x == 0:
        return 0

    left = 1
    right = x

    while left <= right:
        mid = left + (right - left) // 2

        if mid * mid == x:
            return mid
        elif mid * mid < x:
            left = mid + 1
        else:
            right = mid - 1

    return right

A peak element is an element that is strictly greater than its neighbors.
Given a **0-indexed** integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to **any of the peaks**.
You may imagine that `nums[-1] = nums[n] = -∞`. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.
You must write an algorithm that runs in `O(log n)` time.

Ans:- 
def findPeakElement(nums):
    left = 0
    right = len(nums) - 1

    while left < right:
        mid = left + (right - left) // 2

        if nums[mid] > nums[mid + 1]:
            right = mid
        else:
            left = mid + 1

    return left

Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.
Ans:- 

def findMissingNumber(nums):
    n = len(nums)
    expected_sum = (n * (n + 1)) // 2

    for num in nums:
        expected_sum -= num

    return expected_sum

Given an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive.
There is only **one repeated number** in `nums`, return *this repeated number*.
You must solve the problem **without** modifying the array `nums` and uses only constant extra space.

Ans:- 

def findDuplicate(nums):
    slow = fast = nums[0]

    # Move slow and fast pointers to find the meeting point
    while True:
        slow = nums[slow]
        fast = nums[nums[fast]]
        if slow == fast:
            break

    # Move slow back to the first element
    slow = nums[0]

    # Move both pointers until they meet again
    while slow != fast:
        slow = nums[slow]
        fast = nums[fast]

    return slow

Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.
ANS 

def intersection(nums1, nums2):
    set1 = set(nums1)
    result = []

    for num in nums2:
        if num in set1:
            result.append(num)
            set1.remove(num)

    return result

Suppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become:
- `[4,5,6,7,0,1,2]` if it was rotated `4` times.
- `[0,1,2,4,5,6,7]` if it was rotated `7` times.
Notice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.
Given the sorted rotated array `nums` of **unique** elements, return *the minimum element of this array*.
You must write an algorithm that runs in `O(log n) time.`

def findMin(nums):
    left, right = 0, len(nums) - 1

    while left < right:
        mid = left + (right - left) // 2

        if nums[mid] > nums[right]:
            left = mid + 1
        elif nums[mid] < nums[right]:
            right = mid
        else:
            right -= 1

    return nums[left]
    
Given an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given `target` value.
If `target` is not found in the array, return `[-1, -1]`.
You must write an algorithm with `O(log n)` runtime complexity.

ANS 
def searchRange(nums, target):
    if target not in nums:
        return [-1, -1]
    else:
        return [nums.index(target), nums.index(target, nums.index(target) + 1) if target in nums[nums.index(target) + 1:] else nums.index(target)]


Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

ANS 
from collections import Counter

def intersect(nums1, nums2):
    counter = Counter(nums1)  # Count the occurrences of elements in nums1
    result = []
    
    for num in nums2:
        if counter[num] > 0:  # Check if num is present in counter
            result.append(num)  # Add num to the result
            counter[num] -= 1  # Decrease the count of num in counter
    
    return result



































